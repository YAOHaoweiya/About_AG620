<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AG620_CODE_V1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AG620_CODE_V1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Jul 26 10:36:42 2023
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
OTGFS1_IRQHandler &rArr; usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[52]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">BusFault_Handler</a><BR>
 <LI><a href="#[18]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SVC_Handler</a><BR>
 <LI><a href="#[1a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ACC_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[29]">ADC1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[3b]">CAN1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[21]">CRM_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[26]">DMA1_Channel1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[28]">DMA1_Channel7_4_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1f]">ERTC_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[24]">EXINT15_4_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[22]">EXINT1_0_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[23]">EXINT3_2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[3d]">I2C1_ERR_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[34]">I2C1_EVT_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[3f]">I2C2_ERR_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[35]">I2C2_EVT_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[3c]">OTGFS1_IRQHandler</a> from main.o(.text.OTGFS1_IRQHandler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1e]">PVM_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1c]">SysTick_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_at32f425.o(.text.SystemInit) referenced from startup_at32f425.o(.text)
 <LI><a href="#[40]">TMR13_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[30]">TMR14_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[31]">TMR15_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[32]">TMR16_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[33]">TMR17_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2a]">TMR1_BRK_OVF_TRG_HALL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2b]">TMR1_CH_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2c]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2d]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2e]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2f]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[3a]">USART4_3_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1d]">WWDT_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_at32f425.o(.text)
 <LI><a href="#[1]">class_clear_handler</a> from custom_hid_class.o(.text.class_clear_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[4]">class_ept0_rx_handler</a> from custom_hid_class.o(.text.class_ept0_rx_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[3]">class_ept0_tx_handler</a> from custom_hid_class.o(.text.class_ept0_tx_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[8]">class_event_handler</a> from custom_hid_class.o(.text.class_event_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[5]">class_in_handler</a> from custom_hid_class.o(.text.class_in_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[0]">class_init_handler</a> from custom_hid_class.o(.text.class_init_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[6]">class_out_handler</a> from custom_hid_class.o(.text.class_out_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[2]">class_setup_handler</a> from custom_hid_class.o(.text.class_setup_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[7]">class_sof_handler</a> from custom_hid_class.o(.text.class_sof_handler) referenced 2 times from custom_hid_class.o(.data.custom_hid_class_handler)
 <LI><a href="#[12]">get_device_config_string</a> from custom_hid_desc.o(.text.get_device_config_string) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[b]">get_device_configuration</a> from custom_hid_desc.o(.text.get_device_configuration) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[9]">get_device_descriptor</a> from custom_hid_desc.o(.text.get_device_descriptor) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[11]">get_device_interface_string</a> from custom_hid_desc.o(.text.get_device_interface_string) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[d]">get_device_lang_id</a> from custom_hid_desc.o(.text.get_device_lang_id) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[e]">get_device_manufacturer_string</a> from custom_hid_desc.o(.text.get_device_manufacturer_string) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[c]">get_device_other_speed</a> from custom_hid_desc.o(.text.get_device_other_speed) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[f]">get_device_product_string</a> from custom_hid_desc.o(.text.get_device_product_string) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[a]">get_device_qualifier</a> from custom_hid_desc.o(.text.get_device_qualifier) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
 <LI><a href="#[10]">get_device_serial_string</a> from custom_hid_desc.o(.text.get_device_serial_string) referenced 2 times from custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[45]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[44]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[103]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[104]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[53]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[106]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel7_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ERTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXINT15_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXINT1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXINT3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR13_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TMR14_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TMR15_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TMR16_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TMR17_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR1_BRK_OVF_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f425.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>

<P><STRONG><a name="[107]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[10d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>AG620_show</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, ag620_show.o(.text.AG620_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AG620_show &rArr; all_led_on &rArr; TM1668_WriteBytesAddrIncrease &rArr; spi1_writ_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_led_off
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_led_on
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_WriteBytesAddrIncrease
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text.OTGFS1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OTGFS1_IRQHandler &rArr; usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, system_at32f425.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>TM1668_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tm1668.o(.text.TM1668_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TM1668_Init &rArr; spi_config &rArr; spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_writ_byte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_End
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ag620_show_init
</UL>

<P><STRONG><a name="[59]"></a>TM1668_WriteBytesAddrIncrease</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tm1668.o(.text.TM1668_WriteBytesAddrIncrease))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TM1668_WriteBytesAddrIncrease &rArr; spi1_writ_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_writ_byte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_End
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_led_off
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_led_on
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
</UL>

<P><STRONG><a name="[98]"></a>acc_calibration_mode_enable</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, at32f425_acc.o(.text.acc_calibration_mode_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = acc_calibration_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>

<P><STRONG><a name="[95]"></a>acc_write_c1</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f425_acc.o(.text.acc_write_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = acc_write_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>

<P><STRONG><a name="[96]"></a>acc_write_c2</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f425_acc.o(.text.acc_write_c2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = acc_write_c2
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>

<P><STRONG><a name="[97]"></a>acc_write_c3</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f425_acc.o(.text.acc_write_c3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = acc_write_c3
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>

<P><STRONG><a name="[63]"></a>ag620_show_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ag620_show.o(.text.ag620_show_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ag620_show_init &rArr; TM1668_Init &rArr; spi_config &rArr; spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>crm_ahb_div_set</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_ahb_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[8f]"></a>crm_apb1_div_set</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_apb1_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb1_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[8e]"></a>crm_apb2_div_set</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_apb2_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb2_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[8a]"></a>crm_clock_source_enable</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, at32f425_crm.o(.text.crm_clock_source_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_clock_source_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[8b]"></a>crm_flag_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f425_crm.o(.text.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[6d]"></a>crm_hick_divider_select</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_hick_divider_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_hick_divider_select
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>

<P><STRONG><a name="[6c]"></a>crm_hick_sclk_frequency_select</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at32f425_crm.o(.text.crm_hick_sclk_frequency_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_hick_sclk_frequency_select &rArr; crm_hick_divider_select
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_divider_select
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
</UL>

<P><STRONG><a name="[77]"></a>crm_periph_clock_enable</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, at32f425_crm.o(.text.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[8c]"></a>crm_pll_config</STRONG> (Thumb, 484 bytes, Stack size 12 bytes, at32f425_crm.o(.text.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[89]"></a>crm_reset</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, at32f425_crm.o(.text.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[90]"></a>crm_sysclk_switch</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_sysclk_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_sysclk_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[91]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f425_crm.o(.text.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[92]"></a>crm_usb_clock_div_set</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_usb_clock_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_usb_clock_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[6e]"></a>crm_usb_clock_source_select</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, at32f425_crm.o(.text.crm_usb_clock_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crm_usb_clock_source_select &rArr; crm_hick_sclk_frequency_select &rArr; crm_hick_divider_select
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[99]"></a>crm_usb_div_reset</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, at32f425_crm.o(.text.crm_usb_div_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_usb_div_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>

<P><STRONG><a name="[6f]"></a>delay_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, delay.o(.text.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_init &rArr; systick_clock_source_config
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>delay_ms</STRONG> (Thumb, 216 bytes, Stack size 12 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
</UL>

<P><STRONG><a name="[5c]"></a>exint_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, at32f425_exint.o(.text.exint_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exint_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>exint_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, at32f425_exint.o(.text.exint_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exint_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>gpio_default_para_init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f425_gpio.o(.text.gpio_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
</UL>

<P><STRONG><a name="[88]"></a>gpio_init</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, at32f425_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ag620_show_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9d]"></a>num_map</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ag620_show.o(.text.num_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_map
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_buf_process
</UL>

<P><STRONG><a name="[79]"></a>nvic_irq_enable</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at32f425_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvic_irq_enable &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>nvic_priority_group_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at32f425_misc.o(.text.nvic_priority_group_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_priority_group_config &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>spi1_writ_byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, spi.o(.text.spi1_writ_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi1_writ_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_WriteBytesAddrIncrease
</UL>

<P><STRONG><a name="[5f]"></a>spi_config</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, spi.o(.text.spi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = spi_config &rArr; spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Init
</UL>

<P><STRONG><a name="[84]"></a>spi_default_para_init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, at32f425_spi.o(.text.spi_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[86]"></a>spi_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f425_spi.o(.text.spi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[81]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at32f425_spi.o(.text.spi_i2s_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_writ_byte
</UL>

<P><STRONG><a name="[82]"></a>spi_i2s_flag_get</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, at32f425_spi.o(.text.spi_i2s_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_i2s_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_writ_byte
</UL>

<P><STRONG><a name="[85]"></a>spi_init</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, at32f425_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[7b]"></a>stand_read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ag620_show.o(.text.stand_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stand_read &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>system_clock_config</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, at32f425_clock.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>system_core_clock_update</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, system_at32f425.o(.text.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[70]"></a>systick_clock_source_config</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, at32f425_misc.o(.text.systick_clock_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[78]"></a>usb_clock48m_select</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, main.o(.text.usb_clock48m_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_clock48m_select &rArr; crm_usb_clock_source_select &rArr; crm_hick_sclk_frequency_select &rArr; crm_hick_divider_select
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_div_reset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_write_c3
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_write_c2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_write_c1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_calibration_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>usb_connect</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[ce]"></a>usb_core_config</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usb_core.o(.text.usb_core_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_core_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[bf]"></a>usb_disconnect</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
</UL>

<P><STRONG><a name="[c4]"></a>usb_ept0_setup</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_ept0_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_ept0_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>

<P><STRONG><a name="[dd]"></a>usb_ept0_start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_ept0_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept0_start
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[a3]"></a>usb_ept_clear_stall</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_ept_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_stall
</UL>

<P><STRONG><a name="[c5]"></a>usb_ept_close</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_ept_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_close
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_close
</UL>

<P><STRONG><a name="[aa]"></a>usb_ept_default_init</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, usbd_core.o(.text.usb_ept_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[cc]"></a>usb_ept_in_clear</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, at32f425_usb.o(.text.usb_ept_in_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_in_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[cb]"></a>usb_ept_in_interrupt</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, at32f425_usb.o(.text.usb_ept_in_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_ept_in_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[c6]"></a>usb_ept_open</STRONG> (Thumb, 478 bytes, Stack size 12 bytes, at32f425_usb.o(.text.usb_ept_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>

<P><STRONG><a name="[db]"></a>usb_ept_out_clear</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, at32f425_usb.o(.text.usb_ept_out_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_out_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[da]"></a>usb_ept_out_interrupt</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at32f425_usb.o(.text.usb_ept_out_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_out_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[e0]"></a>usb_ept_stall</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_ept_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
</UL>

<P><STRONG><a name="[af]"></a>usb_flush_rx_fifo</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_flush_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_flush_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[ae]"></a>usb_flush_tx_fifo</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, at32f425_usb.o(.text.usb_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[ca]"></a>usb_get_all_in_interrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_get_all_in_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_get_all_in_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[d9]"></a>usb_get_all_out_interrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_get_all_out_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_get_all_out_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[d0]"></a>usb_global_clear_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_global_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_clear_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[cf]"></a>usb_global_get_all_interrupt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_global_get_all_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_get_all_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[9a]"></a>usb_global_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at32f425_usb.o(.text.usb_global_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_global_init &rArr; usb_global_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[de]"></a>usb_global_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_global_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
</UL>

<P><STRONG><a name="[9b]"></a>usb_global_reset</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_global_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
</UL>

<P><STRONG><a name="[cd]"></a>usb_global_select_core</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_global_select_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_global_select_core
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[ac]"></a>usb_global_set_mode</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_global_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[76]"></a>usb_gpio_config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.usb_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_gpio_config &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>usb_interrupt_disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[b1]"></a>usb_interrupt_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[ad]"></a>usb_open_phy_clk</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_open_phy_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_open_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_wakeup_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[df]"></a>usb_read_packet</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at32f425_usb.o(.text.usb_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
</UL>

<P><STRONG><a name="[dc]"></a>usb_set_address</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[c7]"></a>usb_set_rx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at32f425_usb.o(.text.usb_set_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_set_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>

<P><STRONG><a name="[c8]"></a>usb_set_tx_fifo</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, at32f425_usb.o(.text.usb_set_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_set_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>

<P><STRONG><a name="[c2]"></a>usb_stop_phy_clk</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_stop_phy_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_stop_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>

<P><STRONG><a name="[c1]"></a>usb_suspend_status_get</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at32f425_usb.o(.text.usb_suspend_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_suspend_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>

<P><STRONG><a name="[9e]"></a>usb_write_empty_txfifo</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, usbd_int.o(.text.usb_write_empty_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_write_empty_txfifo &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[9f]"></a>usb_write_packet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, at32f425_usb.o(.text.usb_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_empty_txfifo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>

<P><STRONG><a name="[a2]"></a>usbd_clear_stall</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_clear_stall &rArr; usb_ept_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
</UL>

<P><STRONG><a name="[a4]"></a>usbd_connect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_connect &rArr; usb_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[a6]"></a>usbd_core_in_handler</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, usbd_core.o(.text.usbd_core_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_core_in_handler &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv_status
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[a8]"></a>usbd_core_init</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, usbd_core.o(.text.usbd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_default_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_set_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_disable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_rx_fifo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[b2]"></a>usbd_core_out_handler</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, usbd_core.o(.text.usbd_core_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_core_out_handler &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[b3]"></a>usbd_core_setup_handler</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_core_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[6a]"></a>usbd_ctrl_recv</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_ctrl_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_ctrl_recv &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[a7]"></a>usbd_ctrl_recv_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_ctrl_recv_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_ctrl_recv_status &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[69]"></a>usbd_ctrl_send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_ctrl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[a1]"></a>usbd_ctrl_send_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_ctrl_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_feature
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
</UL>

<P><STRONG><a name="[6b]"></a>usbd_ctrl_unsupport</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_ctrl_unsupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_ctrl_unsupport &rArr; usbd_set_stall &rArr; usb_ept_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[b5]"></a>usbd_device_request</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usbd_sdr.o(.text.usbd_device_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_feature
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[a9]"></a>usbd_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_disconnect &rArr; usb_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[b7]"></a>usbd_endpoint_request</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, usbd_sdr.o(.text.usbd_endpoint_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usbd_endpoint_request &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_stall
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[c0]"></a>usbd_enter_suspend</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_enter_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_enter_suspend &rArr; usb_suspend_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_suspend_status_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend_handler
</UL>

<P><STRONG><a name="[c3]"></a>usbd_enumdone_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usbd_int.o(.text.usbd_enumdone_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_enumdone_handler &rArr; usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept0_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[64]"></a>usbd_ept_close</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_ept_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ept_close &rArr; usb_ept_close
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_clear_handler
</UL>

<P><STRONG><a name="[67]"></a>usbd_ept_open</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_ept_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
</UL>

<P><STRONG><a name="[68]"></a>usbd_ept_recv</STRONG> (Thumb, 280 bytes, Stack size 36 bytes, usbd_core.o(.text.usbd_ept_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_out_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
</UL>

<P><STRONG><a name="[9c]"></a>usbd_ept_send</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, usbd_core.o(.text.usbd_ept_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_buf_process
</UL>

<P><STRONG><a name="[b0]"></a>usbd_fifo_alloc</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_fifo_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_tx_fifo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[65]"></a>usbd_get_recv_len</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, usbd_core.o(.text.usbd_get_recv_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_get_recv_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_out_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_ept0_rx_handler
</UL>

<P><STRONG><a name="[d5]"></a>usbd_incomisioin_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_int.o(.text.usbd_incomisioin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_incomisioin_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[d6]"></a>usbd_incomisoout_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_int.o(.text.usbd_incomisoout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_incomisoout_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[c9]"></a>usbd_inept_handler</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usbd_int.o(.text.usbd_inept_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usbd_inept_handler &rArr; usbd_core_in_handler &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_empty_txfifo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_in_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_in_interrupt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_all_in_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[7a]"></a>usbd_init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, usb_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_select_core
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>usbd_interface_request</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbd_sdr.o(.text.usbd_interface_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_interface_request &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[5d]"></a>usbd_irq_handler</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, usbd_int.o(.text.usbd_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_wakeup_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_incomisoout_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_incomisioin_handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_sof_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_clear_interrupt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_get_all_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>usbd_outept_handler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, usbd_int.o(.text.usbd_outept_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_out_clear
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_out_interrupt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_all_out_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[d2]"></a>usbd_reset_handler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, usbd_int.o(.text.usbd_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_reset_handler &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept0_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_address
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[d4]"></a>usbd_rxflvl_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, usbd_int.o(.text.usbd_rxflvl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_rxflvl_handler &rArr; usb_read_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read_packet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[b8]"></a>usbd_set_stall</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_set_stall &rArr; usb_ept_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>

<P><STRONG><a name="[b4]"></a>usbd_setup_request_parse</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_sdr.o(.text.usbd_setup_request_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_setup_request_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[d3]"></a>usbd_sof_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_int.o(.text.usbd_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_sof_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[d8]"></a>usbd_suspend_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_int.o(.text.usbd_suspend_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_suspend_handler &rArr; usbd_enter_suspend &rArr; usb_suspend_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[d7]"></a>usbd_wakeup_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_int.o(.text.usbd_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_wakeup_handler &rArr; usb_open_phy_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7c]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f425_misc.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[7d]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, at32f425_misc.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[7e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at32f425_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[7f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, at32f425_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[80]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, at32f425_misc.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>

<P><STRONG><a name="[0]"></a>class_init_handler</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, custom_hid_class.o(.text.class_init_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = class_init_handler &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[1]"></a>class_clear_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, custom_hid_class.o(.text.class_clear_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = class_clear_handler &rArr; usbd_ept_close &rArr; usb_ept_close
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[2]"></a>class_setup_handler</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, custom_hid_class.o(.text.class_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = class_setup_handler &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[3]"></a>class_ept0_tx_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, custom_hid_class.o(.text.class_ept0_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = class_ept0_tx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[4]"></a>class_ept0_rx_handler</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, custom_hid_class.o(.text.class_ept0_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = class_ept0_rx_handler &rArr; usb_hid_buf_process &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_recv_len
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_buf_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[66]"></a>usb_hid_buf_process</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, custom_hid_class.o(.text.usb_hid_buf_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usb_hid_buf_process &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_map
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_out_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_ept0_rx_handler
</UL>

<P><STRONG><a name="[5]"></a>class_in_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, custom_hid_class.o(.text.class_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = class_in_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[6]"></a>class_out_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, custom_hid_class.o(.text.class_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = class_out_handler &rArr; usb_hid_buf_process &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_recv_len
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_buf_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[7]"></a>class_sof_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, custom_hid_class.o(.text.class_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = class_sof_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[8]"></a>class_event_handler</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, custom_hid_class.o(.text.class_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = class_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_class.o(.data.custom_hid_class_handler)
</UL>
<P><STRONG><a name="[9]"></a>get_device_descriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, custom_hid_desc.o(.text.get_device_descriptor))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[a]"></a>get_device_qualifier</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custom_hid_desc.o(.text.get_device_qualifier))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[b]"></a>get_device_configuration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, custom_hid_desc.o(.text.get_device_configuration))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[c]"></a>get_device_other_speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custom_hid_desc.o(.text.get_device_other_speed))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[d]"></a>get_device_lang_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, custom_hid_desc.o(.text.get_device_lang_id))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[e]"></a>get_device_manufacturer_string</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, custom_hid_desc.o(.text.get_device_manufacturer_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_device_manufacturer_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[71]"></a>usbd_unicode_convert</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, custom_hid_desc.o(.text.usbd_unicode_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_unicode_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_config_string
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_interface_string
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_product_string
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_manufacturer_string
</UL>

<P><STRONG><a name="[f]"></a>get_device_product_string</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, custom_hid_desc.o(.text.get_device_product_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_device_product_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[10]"></a>get_device_serial_string</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, custom_hid_desc.o(.text.get_device_serial_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_device_serial_string &rArr; get_serial_num &rArr; usbd_int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[72]"></a>get_serial_num</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, custom_hid_desc.o(.text.get_serial_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_serial_num &rArr; usbd_int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_serial_string
</UL>

<P><STRONG><a name="[11]"></a>get_device_interface_string</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, custom_hid_desc.o(.text.get_device_interface_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_device_interface_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[12]"></a>get_device_config_string</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, custom_hid_desc.o(.text.get_device_config_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_device_config_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_desc.o(.data.custom_hid_desc_handler)
</UL>
<P><STRONG><a name="[73]"></a>usbd_int_to_unicode</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, custom_hid_desc.o(.text.usbd_int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_num
</UL>

<P><STRONG><a name="[b9]"></a>usbd_get_status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_sdr.o(.text.usbd_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_get_status &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[a0]"></a>usbd_clear_feature</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_sdr.o(.text.usbd_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_clear_feature &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[ba]"></a>usbd_set_feature</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbd_sdr.o(.text.usbd_set_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_set_feature &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[bb]"></a>usbd_set_address</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbd_sdr.o(.text.usbd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_set_address &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[bc]"></a>usbd_get_descriptor</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, usbd_sdr.o(.text.usbd_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[bd]"></a>usbd_get_configuration</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbd_sdr.o(.text.usbd_get_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbd_get_configuration &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[be]"></a>usbd_set_configuration</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, usbd_sdr.o(.text.usbd_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_set_configuration &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[60]"></a>TM1668_Start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tm1668.o(.text.TM1668_Start))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_WriteBytesAddrIncrease
</UL>

<P><STRONG><a name="[62]"></a>TM1668_End</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tm1668.o(.text.TM1668_End))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_WriteBytesAddrIncrease
</UL>

<P><STRONG><a name="[83]"></a>spi_gpio_config</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, spi.o(.text.spi_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[55]"></a>data_clear</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ag620_show.o(.text.data_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_led_off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
</UL>

<P><STRONG><a name="[56]"></a>all_led_on</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ag620_show.o(.text.all_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = all_led_on &rArr; TM1668_WriteBytesAddrIncrease &rArr; spi1_writ_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_WriteBytesAddrIncrease
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
</UL>

<P><STRONG><a name="[57]"></a>all_led_off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ag620_show.o(.text.all_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = all_led_off &rArr; TM1668_WriteBytesAddrIncrease &rArr; spi1_writ_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1668_WriteBytesAddrIncrease
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
</UL>

<P><STRONG><a name="[58]"></a>number</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ag620_show.o(.text.number))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = number
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AG620_show
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
